version: 2.1
description: |
  Allows jobs or entire workflows to be queued to ensure they run in serial.
  This is ideal for deployments or other activities that must not run concurrently.

  Fork of eddiewebb/queue v3 pre-release.

display:
  source_url: https://github.com/carwow/circleci-queue

examples:
  queue_workflow:
    description: Used typically as first job and will queue until no previous workflows are running
    usage:
      version: 2.1
      orbs:
        queue: carwow/queue@1

      workflows:
        build_deploy:
          jobs:
            - queue/block_workflow:
                circleci-api-key: CIRCLE_TOKEN
                my-pipeline: <<pipeline.number>>
            - some_other_job:
                requires:
                  - queue/block_workflow

  single_concurrency_job:
    description: |
      Used to ensure that a only single job (deploy) is not run concurrently.
      By default will only queue if the same job from previous worfklows is running on the same branch.
      This allows safe jobs like build/test to overlap, minimizing overall queue times.
    usage:
      version: 2.1
      orbs:
        queue: carwow/queue@1

      workflows:
        build_deploy:
          jobs:
            - build
            - deploy:
                requires:
                  - build
      jobs:
        build:
          docker:
            - image: circleci/ruby
          steps:
            - run: echo "This job can overlap"

        deploy:
          docker:
            - image: circleci/ruby
          steps:
            - queue/until_front_of_line:
                circleci-api-key: CIRCLE_TOKEN
                my-pipeline: <<pipeline.number>>
            - run: echo "This job will not overlap"

  multiple_job_names_regexp:
    description: Use regexp-jobname when you have multiple jobs to block order of.
    usage:
      version: 2.1
      orbs:
        queue: carwow/queue@1

      workflows:
        build_deploy:
          jobs:
            - build
            - DeployStep1:
                requires:
                  - build
            - DeployStep2:
                requires:
                  - DeployStep1
      jobs:
        build:
          docker:
            - image: circleci/ruby
          steps:
            - run: echo "This job can overlap"

        DeployStep1:
          docker:
            - image: circleci/ruby
          steps:
            - queue/until_front_of_line:
                circleci-api-key: CIRCLE_TOKEN
                my-pipeline: <<pipeline.number>>
                job-regex: "^DeployStep[0-9]$"
            - run: echo "This job will not overlap with itself or next similar nameds job"

        DeployStep2:
          docker:
            - image: circleci/ruby
          steps:
            - run: echo "This job will block step1 on any further workflows"

